// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rmkl.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fMatProd
arma::mat fMatProd(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _rmkl_fMatProd(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fMatProd(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fMatTransProd
arma::mat fMatTransProd(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _rmkl_fMatTransProd(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fMatTransProd(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fMatSolve
arma::mat fMatSolve(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _rmkl_fMatSolve(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fMatSolve(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fMatInv
arma::mat fMatInv(const arma::mat& x);
RcppExport SEXP _rmkl_fMatInv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fMatInv(x));
    return rcpp_result_gen;
END_RCPP
}
// fMatAdd
arma::mat fMatAdd(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _rmkl_fMatAdd(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fMatAdd(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fMatSubtract
arma::mat fMatSubtract(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _rmkl_fMatSubtract(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fMatSubtract(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fMatSumDiffSquared
double fMatSumDiffSquared(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _rmkl_fMatSumDiffSquared(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fMatSumDiffSquared(x, y));
    return rcpp_result_gen;
END_RCPP
}
// getMKLVersion
std::string getMKLVersion();
RcppExport SEXP _rmkl_getMKLVersion() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getMKLVersion());
    return rcpp_result_gen;
END_RCPP
}
// setMKLThreads
int setMKLThreads(int nThreads);
RcppExport SEXP _rmkl_setMKLThreads(SEXP nThreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nThreads(nThreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(setMKLThreads(nThreads));
    return rcpp_result_gen;
END_RCPP
}
// getMKLThreads
int getMKLThreads();
RcppExport SEXP _rmkl_getMKLThreads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getMKLThreads());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rmkl_fMatProd", (DL_FUNC) &_rmkl_fMatProd, 2},
    {"_rmkl_fMatTransProd", (DL_FUNC) &_rmkl_fMatTransProd, 2},
    {"_rmkl_fMatSolve", (DL_FUNC) &_rmkl_fMatSolve, 2},
    {"_rmkl_fMatInv", (DL_FUNC) &_rmkl_fMatInv, 1},
    {"_rmkl_fMatAdd", (DL_FUNC) &_rmkl_fMatAdd, 2},
    {"_rmkl_fMatSubtract", (DL_FUNC) &_rmkl_fMatSubtract, 2},
    {"_rmkl_fMatSumDiffSquared", (DL_FUNC) &_rmkl_fMatSumDiffSquared, 2},
    {"_rmkl_getMKLVersion", (DL_FUNC) &_rmkl_getMKLVersion, 0},
    {"_rmkl_setMKLThreads", (DL_FUNC) &_rmkl_setMKLThreads, 1},
    {"_rmkl_getMKLThreads", (DL_FUNC) &_rmkl_getMKLThreads, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_rmkl(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
